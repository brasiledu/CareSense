# Generated by Django migrations

from django.db import migrations, models
import django.core.validators


def forwards_func(apps, schema_editor):
    """Migra dados de anos de educação para níveis categóricos"""
    Patient = apps.get_model('patients', 'Patient')
    db_alias = schema_editor.connection.alias

    for patient in Patient.objects.using(db_alias).all():
        # Preserva o valor original em anos
        years = getattr(patient, 'education_level', None)
        
        # Mapeia anos para níveis categóricos
        if years is None or years == 0:
            level = 'NONE'
        elif years <= 8:
            level = 'FUNDAMENTAL'
        elif years <= 11:
            level = 'MEDIO'
        elif years <= 16:
            level = 'GRADUACAO'
        else:
            level = 'POSGRAD'

        # Salva anos no campo legado e define novo nível
        setattr(patient, 'education_years', years)
        setattr(patient, 'education_level_new', level)
        patient.save(update_fields=['education_years', 'education_level_new'])


def reverse_func(apps, schema_editor):
    """Reverso da migração - restaura anos baseado no nível"""
    Patient = apps.get_model('patients', 'Patient')
    db_alias = schema_editor.connection.alias
    
    # Mapeamento reverso aproximado
    level_to_years = {
        'NONE': 0,
        'FUNDAMENTAL': 8,
        'MEDIO': 11,
        'GRADUACAO': 16,
        'POSGRAD': 20
    }
    
    for patient in Patient.objects.using(db_alias).all():
        level = getattr(patient, 'education_level_new', 'FUNDAMENTAL')
        years = level_to_years.get(level, 8)
        setattr(patient, 'education_level', years)
        patient.save(update_fields=['education_level'])


class Migration(migrations.Migration):

    dependencies = [
        ('patients', '0002_alter_patient_options'),
    ]

    operations = [
        # Adiciona campo para preservar anos originais
        migrations.AddField(
            model_name='patient',
            name='education_years',
            field=models.IntegerField(
                null=True,
                blank=True,
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(30)
                ],
                verbose_name='Anos de Estudo (legado)',
                help_text='Campo legado com anos de estudo'
            ),
        ),
        
        # Adiciona campo temporário para novos níveis
        migrations.AddField(
            model_name='patient',
            name='education_level_new',
            field=models.CharField(
                max_length=20,
                default='FUNDAMENTAL',
                choices=[
                    ('NONE', 'Sem escolaridade'),
                    ('FUNDAMENTAL', 'Fundamental'),
                    ('MEDIO', 'Ensino Médio'),
                    ('GRADUACAO', 'Graduação'),
                    ('POSGRAD', 'Pós-graduação'),
                ],
                verbose_name='Nível de Escolaridade'
            ),
        ),
        
        # Executa migração de dados
        migrations.RunPython(forwards_func, reverse_func),
        
        # Remove campo antigo (anos)
        migrations.RemoveField(
            model_name='patient',
            name='education_level',
        ),
        
        # Renomeia novo campo para education_level
        migrations.RenameField(
            model_name='patient',
            old_name='education_level_new',
            new_name='education_level',
        ),
    ]
