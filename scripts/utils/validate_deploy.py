#!/usr/bin/env python3
"""
Valida√ß√£o pr√©-deploy para CareSense
Verifica se todos os arquivos e configura√ß√µes est√£o corretos antes do deploy.
"""

import os
import sys
from pathlib import Path

def check_file_exists(filepath, description):
    """Verifica se um arquivo existe"""
    if os.path.exists(filepath):
        print(f"‚úÖ {description}: {filepath}")
        return True
    else:
        print(f"‚ùå {description}: {filepath} (n√£o encontrado)")
        return False

def check_directory_exists(dirpath, description):
    """Verifica se um diret√≥rio existe"""
    if os.path.isdir(dirpath):
        print(f"‚úÖ {description}: {dirpath}")
        return True
    else:
        print(f"‚ùå {description}: {dirpath} (n√£o encontrado)")
        return False

def main():
    print("üîç CareSense - Valida√ß√£o Pr√©-Deploy")
    print("=" * 50)
    
    base_dir = Path(__file__).parent.parent.parent
    os.chdir(base_dir)
    
    success = True
    
    # Verificar arquivos de deploy
    print("\nüì¶ Arquivos de Deploy:")
    success &= check_file_exists("deploy/build.sh", "Script de build")
    success &= check_file_exists("deploy/render.yaml", "Configura√ß√£o Render")
    success &= check_file_exists("deploy/runtime.txt", "Runtime Python")
    
    # Verificar requirements
    print("\nüìã Requirements:")
    success &= check_file_exists("requirements.txt", "Requirements principal")
    success &= check_file_exists("requirements/requirements-prod.txt", "Requirements produ√ß√£o")
    success &= check_file_exists("requirements/requirements-dev.txt", "Requirements desenvolvimento")
    
    # Verificar scripts
    print("\nüîß Scripts:")
    success &= check_file_exists("scripts/utils/generate_secret_key.py", "Gerador SECRET_KEY")
    
    # Verificar configura√ß√µes
    print("\n‚öôÔ∏è Configura√ß√µes:")
    success &= check_file_exists("config/.env.example", "Exemplo de configura√ß√£o")
    success &= check_file_exists("caresense_project/settings.py", "Settings Django")
    
    # Verificar documenta√ß√£o
    print("\nüìñ Documenta√ß√£o:")
    success &= check_file_exists("docs/deploy/DEPLOY_RENDER.md", "Guia de deploy")
    success &= check_file_exists("README.md", "README principal")
    
    # Verificar estrutura de apps
    print("\nüèóÔ∏è Estrutura de Apps:")
    success &= check_directory_exists("apps", "Diret√≥rio de apps")
    success &= check_directory_exists("apps/patients", "App patients")
    success &= check_directory_exists("apps/assessments", "App assessments")
    success &= check_directory_exists("apps/users", "App users")
    success &= check_directory_exists("apps/core", "App core")
    
    # Verificar permiss√µes do build script
    print("\nüîê Permiss√µes:")
    if os.path.exists("deploy/build.sh"):
        if os.access("deploy/build.sh", os.X_OK):
            print("‚úÖ build.sh tem permiss√£o de execu√ß√£o")
        else:
            print("‚ùå build.sh precisa de permiss√£o de execu√ß√£o")
            print("   Execute: chmod +x deploy/build.sh")
            success = False
    
    # Resultado final
    print("\n" + "=" * 50)
    if success:
        print("üéâ SUCESSO: Projeto pronto para deploy!")
        print("\nPr√≥ximos passos:")
        print("1. Commite as altera√ß√µes no Git")
        print("2. Siga o guia: docs/deploy/DEPLOY_RENDER.md")
        print("3. Configure o reposit√≥rio no Render")
        return 0
    else:
        print("‚ö†Ô∏è  ERRO: Corrija os problemas antes do deploy")
        return 1

if __name__ == "__main__":
    sys.exit(main())
